head	1.8;
access;
symbols;
locks
	root:1.8; strict;
comment	@ * @;


1.8
date	2017.09.23.07.41.51;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2017.09.23.05.15.12;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2017.09.22.17.49.44;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2017.09.22.17.43.16;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2017.09.22.17.41.36;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2017.09.21.04.20.24;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2017.09.20.17.50.59;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2017.09.17.16.35.36;	author root;	state Exp;
branches;
next	;


desc
@this is my third requestingg client
@


1.8
log
@*** empty log message ***
@
text
@#include"header.h"
#include"decleration.h"
#include"request.h"
#define FIFO "fifo%d"
int main(int argc,char *argv[])
{
	int wfd,count=0,rfd1,add;
	char q[8],z[6];
	Request r;
	printf("%d: %s is begin\n",getpid(),__FILE__);	
	r.pid=getpid();
	r.opt='*';
	r.opr2=33;
	r.opr1=43;
	wfd=open("myfile",O_WRONLY);
	count=write(wfd,&r,sizeof(Request));
	printf("write=%d\n",count);
	sprintf(z,FIFO,getpid());
	rfd1=open(z,O_RDONLY);
	read(rfd1,&add,sizeof(int));
	printf("output rec3------------->>>>%d\n",add);
	printf("%d: %s is end\n",getpid(),__FILE__);	
}
@


1.7
log
@we use fifo made by pid of requesting client
@
text
@d13 1
a13 1
	r.opr1=33;
@


1.6
log
@*** empty log message ***
@
text
@d8 1
a8 1
	char q[8];
d18 2
a19 3
	sprintf(FIFO,"fifo%d",getpid());
	mkfifo(FIFO,0777);
	rfd1=open(FIFO,O_RDONLY);
@


1.5
log
@Define a macro FIFo for fifo name with pid
@
text
@a10 6
	printf("Enter the first values\n");
	scanf("%d",&r.opr1);
	printf("Enter any one operation('+','-','*','/')\n");
	scanf(" %c",&r.opt);
	printf("Enter the second values\n");
	scanf("%d",&r.opr2);
d12 3
@


1.4
log
@*** empty log message ***
@
text
@d4 1
@


1.3
log
@We use sigaction in place of signal
@
text
@a8 5
	struct sigaction p;
        p.sa_handler=def;
        sigemptyset(&p.sa_mask);
        p.sa_flags=0;

a9 1
	wfd=atoi(argv[1]);
d17 1
d20 5
a24 8
	rfd1=atoi(argv[2]);
	sigaction(SIGALRM,&p,0);
	pause();
	if(alarm_sig)
	{
		read(rfd1,&add,sizeof(int));
		printf("output rec3------------->>>>%d\n",add);
	}	
@


1.2
log
@Add the signal alarm
@
text
@d9 5
d26 1
a26 1
	signal(SIGALRM,def);
@


1.1
log
@Initial revision
@
text
@d17 1
d21 7
a27 2
	read(rfd1,&add,sizeof(int));
	printf("output rec3------------->>>>%d\n",add);
@
